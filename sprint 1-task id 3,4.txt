#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<conio.h>

#define ETF_RATE 0.03
#define GEN_TIME (8 * 20)
#define EMP_FILE "empdata.txt"
#define TMP_FILE "tmpdata.txt"
#define USER_FILE "user.txt"
#define ADM "admin"
#define PWD "admin"


void welcome_msg(void);
//void get_username(void);
//void get_password(void);
int user_check();
int useremp_check();
void exit_message(void);
void maskPassword(char password[]);
void manage_employee(void);
void emp_menu(void);
void add_employee(void);
void delete_employee(void);
void edit_employee(void);
void search_employee(void);
void add_user(void);
void display(void);
void print_report(void);

int flag=0;
int n=0;

void welcome_msg(void)
{
        system("cls");
        printf("\t\t\t\tWELCOME\n");
        printf("\t\t-------------------------------------\n\n");
        printf("\t\t      PAYROLL MANAGEMENT SYSTEM\n");
        printf("\t\t-------------------------------------\n\n");
        printf("\t1. Administrator Login \n");
        printf("\n\t2. Employee Login \n\n\n");
        printf("\nEnter your choice :  ");
}

int user_check()
{
         char username[10],password[10];
         int isExit=0;
         int flag=0;
         char reply;
         do
         {
     again : system("cls");
             printf("\nUSERNAME >> ");
             scanf("%s",username);
             printf("\nPASSWORD >> ");
             maskPassword(password);
             if(strcmp(username,ADM) !=0 || strcmp(password,PWD) !=0)
             {
      validity : printf("\nUsername or Password is not valid");
                 sleep(1);
           ask : printf("\n\n\nTo go back enter 'Y' else enter 'N':");
                 reply = getche();
                 if(reply == 'Y' || reply == 'y')
                 {
                      flag=1;
                      isExit=1;
                 }
                 else if(reply == 'N' || reply == 'n')
                 {
                     goto again;
                 }
                 else
                 {
                    printf("\nEnter Y or N !!!!");
                    sleep(1);
                    system("cls");
                    goto ask;
                 }
              }
              else
              {
                   isExit=1;
              }
         }while(isExit==0);
         if(flag==1)
         {
             return 1;
         }
}
/*
void get_username(void)
{
        FILE *fp;
        char username[30];
        int val=0;
        system("cls");
        printf("Enter the username >>> ");
        scanf("%s",username);
        if(strcmp(username,ADM) == 0)
        {
                flag = 0;
        }
        else
        {
                fp = fopen(USER_FILE,"r");
                while(!feof(fp))
                {
                        val=strcmp(username,fp);
                        if(val == 1)
                        {
                                flag =1;
                                break;
                        }
                }
                if(flag = 0)
                        printf("Invalid username!!");
                fclose(fp);
        }
}*/

void maskPassword(char password[30])
{
        char ch;
        int i=0;
        while((ch =_getch())!=13)
        {
                printf("*");
                password[i]=ch;
                i++;
        }
        password[i]='\0';
}
/*
void get_password(void)
{
        char password[30];
        do
        {
                system("cls");
                printf("Enter the password >>> ");
                maskPassword(password);
                if(strcmp(password,PWD)!=0)
                {
                    printf("\nWrong Password!!!");
                    sleep(2);
                }
        }while(strcmp(password,PWD)!=0);
}*/

void main_menu(void)
{
        system("cls");
        printf("\t\t\t\t _________________");
        printf("\n\t\t\t\t|\t\t      MENU                     |");
        printf("\n\t\t\t\t|________________|");
        printf("\n\t\t\t\t| [1] MANAGE EMPLOYEES                         |");
        printf("\n\t\t\t\t|________________|");
        printf("\n\t\t\t\t| [2] PRINT REPORT                             |");
        printf("\n\t\t\t\t|________________|");
        printf("\n\t\t\t\t| [3] PRINT SLIP                               |");
        printf("\n\t\t\t\t|________________|");
        printf("\n\t\t\t\t| [4] ADD USER                                 |");
        printf("\n\t\t\t\t|________________|");
        printf("\n\t\t\t\t| [5] EXIT                                     |");
        printf("\n\t\t\t\t|________________|\n");
        printf("\nPLEASE CHOOSE A NUMBER IN THE BOX ABOVE >>> ");
        sleep(1);
}

void manage_employee(void)
{
	int menuOpt;
	int isExit = 0;
	do
	{
		emp_menu();
		fflush(stdin);
		menuOpt = getche();
		switch(menuOpt)
		{
			case '1':
			{
				add_employee();
				break;
			}
			case '2':
			{
				delete_employee();
				break;
			}
			case '3':
			{
				edit_employee();
				break;
			}
			case '4':
			{
				search_employee();
				break;
			}
			case '5':
			{
				display();
				break;
			}
			case '6':
			{
				isExit = 1;
				fflush(stdin);
				break;
			}
			default:
			{
				system("cls");
				printf("Invalid Option!");
				sleep(2);
			}
		}
	}while(isExit == 0);
}

void emp_menu(void)
{
	system("cls");
	printf("\t\t\t\t\t MENU\n");
	printf("\t\t\t\t---------------------\n");
	printf("\t\t\t\t[1] : Add Employee\n");
	printf("\t\t\t\t[2] : Delete Employee\n");
	printf("\t\t\t\t[3] : Edit Employee\n");
	printf("\t\t\t\t[4] : Search Employee\n");
	printf("\t\t\t\t[5] : Display Employee\n");
	printf("\t\t\t\t[6] : Go Back\n\n");
	printf("Choose a number from above >>> ");
	sleep(1);
}

void add_employee(void)
{
	char name[50];
	char address[100];
	char dept[10];
	int phone[4];
	char id[10];
	float salary;
	float hours,leave;
	FILE *fp;
	fp = fopen(EMP_FILE, "a+");
	if(fp == NULL)
    {
        printf("\nError to open the file\n");
        exit (1);
    }
	system("cls");

	printf("ID: ");
	fflush(stdin);
	gets(id);

	printf("Name: ");
	fflush(stdin);
	gets(name);

	printf("Address: ");
	fflush(stdin);
	gets(address);

	printf("Department: ");
	fflush(stdin);
	gets(dept);

	printf("Phone: ");
	fflush(stdin);
    scanf("%d",&phone);

    printf("Salary: ");
	fflush(stdin);
	scanf("%f",&salary);

	printf("Hours: ");
	fflush(stdin);
	scanf("%f",&hours);

	printf("Leaves taken: ");
	fflush(stdin);
	scanf("%f",&leave);

	fprintf(fp, "%s/%s/%s/%s/%d %.2f %.2f %.2f\n", id, name, address, dept, phone, salary, hours, leave);
	fflush(fp);
	fclose(fp);
	system("cls");
	printf("New records are entered successfully");
	sleep(2);
}

void delete_employee(void)
{
	char name[50];
	char address[100];
	char dept[10];
	int phone[4];
	char id[5];
	char idDel[5];
	float salary;
	float hours,leave;
	int flag = 0;

	FILE *fp1;
	FILE *fp2;
	fp1 = fopen(EMP_FILE, "r");
	fp2 = fopen(TMP_FILE, "w");
	system("cls");
	printf("Enter Employee ID to Delete : ");
	fflush(stdin);
	gets(idDel);
	do
	{
		fscanf(fp1,"%[^/]%*c%[^/]%*c%[^/]%*c%[^/]%*c%d%f%f%f%*c",id, name, address, dept, &phone, &salary, &hours, &leave);
		if(feof(fp1))
		{
			break;
		}
		if((strcmp(id, idDel)) != 0)
		{
			fprintf(fp2, "%s/%s/%s/%s/%d %.2f %.2f %.2f\n", id, name, address, dept, phone, salary, hours, leave);
		}
		if((strcmp(id, idDel)) == 0)
        {
            flag=1;
        }
	}while(!(feof(fp1)));
	fflush(fp2);
	fclose(fp1);
	fclose(fp2);
	if(flag == 0)
    {
        system("cls");
        printf("Id is not present");
        sleep(1);
    }
    else
    {
        remove(EMP_FILE);
        rename(TMP_FILE, EMP_FILE);
        system("cls");
        printf("Done Deleting ");
        sleep(1);
        fflush(stdin);
        system("cls");
        display();
    }
}

void edit_employee(void)
{
    char address[100],name[50],dept[10];
    float hours,leave,chours;
    int phone[4];
    char id[10];
    char idEdit[10];
    int flag=0;
    float salary,csalary;
    FILE *fp1;
	FILE *fp2;
	fp1 = fopen(EMP_FILE, "r");
	fp2 = fopen(TMP_FILE, "w");
	system("cls");
	printf("Enter Employee ID to Edit : ");
	fflush(stdin);
	gets(idEdit);
	system("cls");
	do
	{
		fscanf(fp1,"%[^/]%*c%[^/]%*c%[^/]%*c%[^/]%*c%d%f%f%f%*c",id, name, address, dept, &phone, &salary, &hours, &leave);
		if(feof(fp1))
		{
			break;
		}
		if((strcmp(id, idEdit)) == 0)
		{
		    flag=1;
		    printf("\n\t\t\t\t\t    Basic Pay");
            printf("\n\t\t\t\t--------------------------------------\n");
            printf("\n\t\t\t\t\tTechnician - 25000");
            printf("\n\t\t\t\t\tSales - 20000");
            printf("\n\t\t\t\t\tManager - 50000");
            printf("\n\t\t\t\t\tSweeper - 12000\n\n");
			printf("Enter new basic salary : ");
			fflush(stdin);
			scanf("%f", &csalary);
			salary = csalary;
			printf("Enter the number of hours worked : ");
			fflush(stdin);
			scanf("%f", &chours);
			hours = chours;
		    fprintf(fp2, "%s/%s/%s/%s/%d %.2f %.2f %.2f\n", id, name, address, dept, phone, salary, hours, leave);
		}
	}while(!(feof(fp1)));
	fflush(fp2);
	fclose(fp1);
    fclose(fp2);
    if(flag==0)
    {
        printf("Id not found");
        sleep(1);
    }
    else
    {
        remove(EMP_FILE);
        rename(TMP_FILE, EMP_FILE);
        system("cls");
        printf("Done Editing Employee");
        fflush(stdin);
        display();
    }
}

void print_report(void)
{
    char address[100],name[50],dept[10];
    float hours,leave,cleave,chours,otHrs,ot,netSal,npresent;
    int phone[4];
    char id[10];
    float salary,csalary,da,hra,ta,others,epf,etf,otRate;
    FILE *fp;
	fp = fopen(EMP_FILE, "r");
	system("cls");
	do
	{
		fscanf(fp,"%[^/]%*c%[^/]%*c%[^/]%*c%[^/]%*c%d%f%f%f%*c",id, name, address, dept, &phone, &salary, &hours, &leave);
		if(feof(fp))
		{
			break;
		}
		csalary = salary;
		printf("\n%s - %s",id,name);
		printf("\nEnter HRA :");
		scanf("%f",&hra);
		printf("\nEnter TA : ");
		scanf("%f",&ta);
		printf("\nEnter the sum of any other allowances : ");
		scanf("%f",&others);
		printf("\nEnter total number of hours worked in a month : ");
		scanf("%f",&chours);
		printf("\nLeave for:\nOne day = 1\tHalf day = 0.5\nEnter total sum of number of leave's taken : ");
		scanf("%f",&cleave);

        npresent = (20.00-cleave);
		epf = (csalary*14)/100;
		etf = csalary * ETF_RATE;
		otHrs = chours - GEN_TIME;
		otRate = csalary / GEN_TIME;
		if(otHrs > 0)
		{
              ot = otHrs * otRate;
        }
        else
        {
              ot = 0;
              otHrs = 0;
        }
		netSal = csalary - (epf + etf) + ot;
		printf("\nId=%10s\nSalary=%5.2f\nHours=%3.2f\nOvertime hrs=%3.2f\nExtra pay=%3.2f\nTotal Salary=%5.2f\nAttendance=%5.2f days\n", id, csalary, chours, otHrs, ot, netSal, npresent);
		printf("\nDeductions\nPF=%5.2f\nETF=%5.2f",epf, etf);
	}while(!(feof(fp)));
	fclose(fp);
	getch();
}

void print_slip(void)
{
	char name[50],dept[10];
	char address[100];
	int phone[4];
	char id[5];
	char empId[5];
	float salary,csalary;
	float hours,chours;
	float leave, cleave;
	float epf;
	float etf;
	float netSal,npresent;
	float ot, otRate, otHrs,hra,ta,others;
	FILE *fp;
	fp = fopen(EMP_FILE, "r");
	system("cls");
	printf("Enter Employee ID to print : ");
	fflush(stdin);
	gets(empId);
	do
	{
		fscanf(fp, "%[^/]%*c%[^/]%*c%[^/]%*c%[^/]%*c%d%f%f%f%*c",id, name, address, dept, &phone, &salary, &hours, &leave);
		if(feof(fp))
		{
			break;
		}
		if((strcmp(id, empId)) == 0)
		{
		    printf("\n%s - %s",id,name);
			csalary = salary;
		    printf("\nEnter HRA :");
            scanf("%f",&hra);
            printf("\nEnter TA : ");
            scanf("%f",&ta);
            printf("\nEnter the sum of any other allowances : ");
            scanf("%f",&others);
            printf("\nEnter total number of hours worked : ");
            scanf("%f",&chours);
            printf("\nLeave for:\nOne day = 1\tHalf day = 0.5\nEnter total sum of number of leave's taken : ");
            scanf("%f",&cleave);

            npresent = (20.00-cleave);
            epf = (csalary*14)/100;
            etf = csalary * ETF_RATE;
            otHrs = chours - GEN_TIME;
            otRate = csalary / GEN_TIME;
            if(otHrs > 0)
            {
                ot = otHrs * otRate;
            }
            else
            {
                ot = 0;
                otHrs = 0;
            }
            netSal = csalary - (epf + etf) + ot;
            printf("\nId=%10s\nSalary=%5.2f\nHours=%3.2f\nOvertime hrs=%3.2f\nExtra pay=%3.2f\nTotal Salary=%5.2f\nAttendance=%5.2f days\n", id, csalary, chours, otHrs, ot, netSal, npresent);
		    printf("\nDeductions\nPF=%5.2f\nETF=%5.2f",epf, etf);
		    getch();
			system("cls");
			printf("Name: %s\n", name);
			printf("Address: %s\n", address);
			printf("Phone: %s\n", phone);
			printf("id: %s\n", id);
			printf("Basic Salary: %.2f\n", salary);
			printf("Total Hours: %.2f\n", hours);
			printf("OT Hours: %.2f\n", otHrs);
			printf("OT Rate: %.2f\n", otRate);
			printf("OT Amount: %.2f\n", ot);
			printf("EPF: %.2f\n", epf);
			printf("ETF: %.2f\n", etf);
			printf("Net Salary: %.2f\n", netSal);
		}
	}while(!(feof(fp)));
	fclose(fp);
	printf("\n\nDone>>>");
	fflush(stdin);
	getch();
}

void search_employee(void)
{
	char name[50];
	char address[100];
	char dept[10];
	int phone[4];
	char id[10];
	char idSearch[10];
	float salary;
	float hours,leave;
	//char ch[300];
	int flag=0;

    system("cls");
    printf("Enter the Employee ID to Search : ");
	fflush(stdin);
	gets(idSearch);

	FILE *fp;
	fp = fopen(EMP_FILE, "r");
	system("cls");

	do
	{
		fscanf(fp,"%[^/]%*c%[^/]%*c%[^/]%*c%[^/]%*c%d%f%f%f%*c",id, name, address, dept, &phone, &salary, &hours, &leave);
		//fgets(ch, "%[^\n]",fp); can use this line or use %*c in the above fscanf
		if(strcmp(id,idSearch) == 0)
        {
            flag=1;
			system("cls");
			printf("ID: %s\n",id);
			printf("Name: %s\n", name);
			printf("Address: %s\n", address);
			printf("Department: %s\n", dept);
			printf("Phone: %d\n", phone);
			printf("Salary: %.2f\n\n", salary);
			printf("Press ENTER to continue >>> ");
			fflush(stdin);
			getch();
        }
        if(feof(fp))
		{
			break;
		}
    }while(!((feof(fp))));
    if(flag == 0)
    {
        printf("Id not present");
        sleep(1);
    }
	fclose(fp);
}

void display(void)
{
    char name[50];
	char address[100];
	char dept[10];
	int phone[4],cphone[4];
	char id[10];
	char idSearch[10];
	float salary;
	float hours,leave;
	int count =0;
	//char ch[300];

    FILE *fp;
	fp = fopen(EMP_FILE, "r");
	system("cls");

	while(!(feof(fp)))
	{
		fscanf(fp,"%[^/]%*c%[^/]%*c%[^/]%*c%[^/]%*c%d%f%f%f%*c",id, name, address, dept, &phone, &salary, &hours, &leave);
        count = count + 1;
	}
	fclose(fp);
	fp = fopen(EMP_FILE, "r");
	while(count-1>0)
	{
		fscanf(fp,"%[^/]%*c%[^/]%*c%[^/]%*c%[^/]%*c%d%f%f%f%*c",id, name, address, dept, &phone, &salary, &hours, &leave);
		printf("\nID: %s\n",id);
        printf("Name: %s\n", name);
		printf("Address: %s\n", address);
		printf("Department: %s\n", dept);
		printf("Phone: %ld\n", phone);
		printf("Salary: %.2f\n", salary);
		printf("Hours: %.2f\n", hours);
		printf("Leave: %.2f\n", leave);
		count--;
	}
	fclose(fp);
	getch();
}

void add_user(void)
{
    char user_id[10];
    char pass[10];
    FILE *fp3;
	fp3 = fopen(USER_FILE, "a+");
	if(fp3 == NULL)
    {
        printf("\nError to open the file\n");
        exit (1);
    }
	system("cls");

	printf("Enter User id: ");
	fflush(stdin);
	gets(user_id);
	printf("Enter password: ");
	fflush(stdin);
	gets(pass);
	fprintf(fp3, "%s/%s\n", user_id,pass);
	fflush(fp3);
	fclose(fp3);
	system("cls");
	printf("New records are entered successfully");
	sleep(2);
}

int useremp_check()
{
         char user_id[10];
         char pass[10];
         char username[10],password[10];
         int isExit=0;
         int flag=0;
         char reply;
         FILE *fp3;
	     fp3 = fopen(USER_FILE, "a+");
         if(fp3 == NULL)
         {
            printf("\nError to open the file\n");
            exit (1);
         }
         do
         {
             fscanf(fp3,"%[^/]%*c%[^/]%*c",user_id,pass);
     again : system("cls");
             printf("\nUSERNAME >> ");
             scanf("%s",username);
             printf("\nPASSWORD >> ");
             maskPassword(password);

             if(strcmp(username,user_id)!=0 || strcmp(password,pass)!=0)
             {
      validity : printf("\nUsername or Password is not valid");
                 sleep(1);
           ask : printf("\n\n\nTo go back enter 'Y' else enter 'N':");
                 reply = getche();
                 if(reply == 'Y' || reply == 'y')
                 {
                      flag=1;
                      isExit=1;
                 }
                 else if(reply == 'N' || reply == 'n')
                 {
                     goto again;
                 }
                 else
                 {
                    printf("\nEnter Y or N !!!!");
                    sleep(1);
                    system("cls");
                    goto ask;
                 }
              }
              else
              {
                   isExit=1;
              }
         }while(isExit==0);
         if(flag==1)
         {
             return 1;
         }
}
void exit_message(void)
{
        system("cls");
        printf("\t\t\t\tTHANK YOU!\n");
        printf("\t\t _____________\n");
        printf("\t\t SUBMITTED TO");
        printf("\t\t SUBMITTED BY\n");
	    printf("\t\t Sivaram\t");
	    printf("\t\t Marvels");
}

int main()
{
        int menuOpt;
        int isExit=0;
        int choice;

    wel : welcome_msg();
        fflush(stdin);
        scanf("%d",&choice);

        switch(choice)
        {
                case 1 :
                    {
                        if(user_check())
                        {
                            goto wel;
                        }
                        break;
                    }
                case 2 :
                    {
                        if(useremp_check())
                        {
                            goto wel;
                        }
                        else
                        {
                            flag=1;
                        }
                        break;
                    }
                default :
                    {
                        printf("\nInvalid entry\n");
                        sleep(1);
                    }
        }
        //get_username();
        //get_password();
        if(flag == 1)
        {
                menuOpt = 3;
                goto label;
        }
        do
        {
            main_menu();
            menuOpt = getche();
            sleep(1);
            fflush(stdin);
    label : switch(menuOpt)
                {
                        case '1':
                        {
                                manage_employee();
                                break;
                        }
                        case '2':
                        {
                                print_report();
                                break;
                        }
                        case '3':
                        {
                                print_slip();
                                break;
                        }
                        case '4':
                        {
                                add_user();
                                break;
                        }
                        case '5':
                        {
                                isExit = 1;
                                break;
                        }
                        default:
                        {
                                system("cls");
                                printf("Invalid Option!");
                                fflush(stdin);
                                sleep(5);
                                break;
                        }
                }
        }while(isExit == 0);
        exit_message();
        fflush(stdin);
        getch();
        return (0);
}